plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
}

if (project.getProperty("CN_AG_APP_ID").toString().isEmpty() &&
        project.getProperty("GLOBAL_AG_APP_ID").toString().isEmpty()) {
    throw new GradleException("请在 gradle.properties 中配置 Agora ID 和 Certificate")
}

android {
    namespace 'io.agora.agent'
    compileSdk rootProject.ext.compileSdkVersion

    defaultConfig {
        ndk.abiFilters 'arm64-v8a', 'armeabi-v7a'
        minSdk rootProject.ext.minSdkVersion
        targetSdk rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    flavorDimensions "region"

    productFlavors {
        china {
            dimension "region"
            applicationId "cn.shengwang.convoai"
            resValue "string", "app_name", "对话式 AI 引擎"
            buildConfigField("Boolean", "IS_MAINLAND", "true")
            buildConfigField("String", "AG_APP_ID", "\"${project.getProperty("CN_AG_APP_ID")}\"")
            buildConfigField("String", "AG_APP_CERTIFICATE", "\"${project.getProperty("CN_AG_APP_CERTIFICATE")}\"")
            buildConfigField("String", "AG_APP_ID_DEV", "\"${project.getProperty("CN_AG_APP_ID_DEV")}\"")
            buildConfigField("String", "AG_APP_CERTIFICATE_DEV", "\"${project.getProperty("CN_AG_APP_CERTIFICATE_DEV")}\"")
        }
        global {
            dimension "region"
            applicationId "io.agora.convoai"
            resValue "string", "app_name", "Convo AI"
            buildConfigField("Boolean", "IS_MAINLAND", "false")
            buildConfigField("String", "AG_APP_ID", "\"${project.getProperty("GLOBAL_AG_APP_ID")}\"")
            buildConfigField("String", "AG_APP_CERTIFICATE", "\"${project.getProperty("GLOBAL_AG_APP_CERTIFICATE")}\"")
            buildConfigField("String", "AG_APP_ID_DEV", "\"${project.getProperty("GLOBAL_AG_APP_ID_DEV")}\"")
            buildConfigField("String", "AG_APP_CERTIFICATE_DEV", "\"${project.getProperty("GLOBAL_AG_APP_CERTIFICATE_DEV")}\"")
        }
    }

    signingConfigs {
        release {
            storeFile new File(rootProject.rootDir.absolutePath + "/keystore.key")
            storePassword "965606"
            keyAlias "agora"
            keyPassword "965606"
        }
    }

    applicationVariants.all {
        variant ->
            variant.outputs.all { output ->
                def appName = variant.applicationId
                outputFileName = new File(
                        rootProject.name + "_" +
                                "v" + defaultConfig.versionName + "_" +
                                buildType.name + "_" +
                                new Date().format("yyyyMMddHHmm") + "_" +
                                appName + ".apk")
            }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        viewBinding true
        buildConfig true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
}

dependencies {
    implementation project(':common')
    implementation project(':scenes:convoai')
    implementation project(':scenes:digitalhuman')
//    def convoAiModule = ':scenes:convoai'
//    if (findProject(convoAiModule) != null) {
//        runtimeOnly project(convoAiModule)
//    }

    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
}